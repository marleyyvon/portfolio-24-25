// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  admin
  faculty
  student
  super_admin
}

enum ProjectStatus {
  proposed
  revise_requested
  advisor_approved
  final_approval
}

enum RequestStatus {
  pending
  approved
  rejected
}

enum GroupRequestType {
  join
  invite
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  role              Role     @default(student)
  isActive          Boolean  @default(true)
  profilePictureUrl String?
  new               Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Student Student?
  Faculty Faculty?
  GroupRequest   GroupRequest[]
  InterestedIn   InterestedIn[]
}

model Student {
  id        String          @id @default(uuid())
  firstName String
  lastName  String
  major     String
  minor     String?
  bio       String?
  skills    StudentSkill[]
  projects  ProjectMember[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String          @unique
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  AdvisorRequest AdvisorRequest[]
}

model Faculty {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  department        String
  bio               String?
  researchInterests String?   @db.Text
  expertiseAreas    String?   @db.Text
  advisedProjects   Project[] @relation("advisorId")
  coAdvisedProjects Project[] @relation("coAdvisorId")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  skills FacultySkill[]
  requestedToAdvise AdvisorRequest[]
}

model Skill {
  id       String         @id @default(uuid())
  name     String         @unique
  students StudentSkill[]
  faculty  FacultySkill[]
  projects ProjectSkill[]
}

model Project {
  id                  String          @id @default(uuid())
  title               String
  description         String
  academicYear        String
  department          String
  isInterdisciplinary Boolean         @default(false)
  status              ProjectStatus   @default(proposed)
  groupOpen           Boolean         @default(true)
  skills              ProjectSkill[]
  advisorId           String?
  coAdvisorId         String?
  advisor             Faculty?        @relation("advisorId", fields: [advisorId], references: [id], onDelete: SetNull)
  coAdvisor           Faculty?        @relation("coAdvisorId", fields: [coAdvisorId], references: [id], onDelete: SetNull)
  members             ProjectMember[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  AdvisorRequest AdvisorRequest[]
  GroupRequest   GroupRequest[]
  InterestedIn   InterestedIn[]
}

model AdvisorRequest {
  id        String        @id @default(uuid())
  status    RequestStatus @default(pending)
  student   Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  faculty   Faculty       @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  studentId String
  projectId String
  facultyId String

  @@index([studentId])
  @@index([projectId])
  @@index([facultyId])
}

model GroupRequest {
  id        String           @id @default(uuid())
  status    RequestStatus    @default(pending)
  type      GroupRequestType @default(join) // join or invite
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  userId String
  projectId String

  @@index([userId])
  @@index([projectId])
}

model ProjectMember {
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  studentId String
  projectId String

  @@id([studentId, projectId])
}

model StudentSkill {
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  studentId String
  skillId   String

  @@id([studentId, skillId])
}

model FacultySkill {
  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  facultyId String
  skillId   String

  @@id([facultyId, skillId])
}

model ProjectSkill {
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  projectId String
  skillId   String

  @@id([projectId, skillId])
}

model InterestedIn {
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  interestedAt DateTime @default(now())

  userId       String
  projectId    String

  @@id([userId, projectId]) 
}
